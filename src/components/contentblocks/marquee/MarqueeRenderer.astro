---
import type { MarqueeProps } from "./marquee.props";

const {
  enable = true,
  direction = "left",
  scrollDuration = "60s",
  primaryContent = "✨ Default Primary Content!",
  secondaryContent,
  separator = "-",
  button,
  backgroundImage,
  backgroundImageStyle,
  customClass = "",
  ariaLabel = "Notification marquee",
  pauseOnHover = true,
}: MarqueeProps = Astro.props;

const isScrolling = direction === "left" || direction === "right";
const scrollClass = isScrolling
  ? direction === "left"
    ? "marquee-scroll-left"
    : "marquee-scroll-right"
  : "";

// 准备内联样式
const marqueeContainerStyle: Record<string, string | number> = {};
if (isScrolling) {
  marqueeContainerStyle["--marquee-duration"] = scrollDuration;
}
if (
  backgroundImage &&
  (!backgroundImageStyle || backgroundImageStyle.position === "cover")
) {
  // 如果只有 backgroundImage URL 或明确指定为 cover，则作为背景
  marqueeContainerStyle.backgroundImage = `url(${backgroundImage})`;
  marqueeContainerStyle.backgroundRepeat =
    backgroundImageStyle?.repeat || "no-repeat";
  marqueeContainerStyle.backgroundSize = backgroundImageStyle?.size || "cover";
  marqueeContainerStyle.backgroundPosition =
    backgroundImageStyle?.position === "cover"
      ? "center"
      : backgroundImageStyle?.position || "center";
  if (backgroundImageStyle?.opacity !== undefined) {
    marqueeContainerStyle.opacity = backgroundImageStyle.opacity; // 注意：这会影响所有子元素
  }
}

// 为了无缝滚动，内容需要重复。重复次数取决于内容宽度和容器宽度，
// 简单的 CSS 动画通常复制一次或两次内容。
// 这里的 [...Array(2)] 是一个简化，实际可能需要更智能的复制。
const contentRepetitions = isScrolling ? 2 : 1; // 不滚动时只显示一份内容

const hasPrimary = primaryContent && primaryContent.trim() !== "";
const hasSecondary = secondaryContent && secondaryContent.trim() !== "";
const showSeparator = hasPrimary && hasSecondary && separator;

// const wrapperClasses = [
//   "marquee-content-wrapper",
//   { static: !isScrolling },
//   scrollClass, // 之前已经包含了滚动方向类
//   isScrolling && pauseOnHover && "pause-on-hover-enabled", // 新增此类
// ]
//   .filter(Boolean)
//   .join(" "); // filter(Boolean) 用于移除 false 或空字符串
---

{
  enable && (hasPrimary || hasSecondary || button) && (
    <div
      class:list={["marquee-container", customClass]}
      style={marqueeContainerStyle}
      role="region"
      aria-label={ariaLabel}
    >
      {/* 左侧独立背景图 (如果配置) */}
      {backgroundImage && backgroundImageStyle?.position === "left" && (
        <div
          class="marquee-bg-image marquee-bg-left"
          style={{
            backgroundImage: `url(${backgroundImage})`,
            backgroundSize: backgroundImageStyle.size || "contain",
            backgroundRepeat: backgroundImageStyle.repeat || "no-repeat",
            opacity: backgroundImageStyle.opacity ?? 1,
          }}
        />
      )}

      <div
        class:list={[
          "marquee-content-wrapper",
          { static: !isScrolling },
          scrollClass,
          { "pause-on-hover-enabled": isScrolling && pauseOnHover },
        ]}
      >
        {Array.from({ length: contentRepetitions }).map(() => (
          <div class="marquee-content-inner">
            {hasPrimary && (
              <div class="marquee-primary" set:html={primaryContent} />
            )}
            {showSeparator && (
              <span class="marquee-separator" aria-hidden="true">
                {separator}
              </span>
            )}
            {hasSecondary && (
              <div class="marquee-secondary" set:html={secondaryContent} />
            )}
            {button && (
              <a
                href={button.url}
                target={button.target || "_self"}
                class="marquee-button"
                aria-label={button.ariaLabel || button.text}
              >
                {button.text}
              </a>
            )}
          </div>
        ))}
      </div>

      {/* 右侧独立背景图 (如果配置) */}
      {backgroundImage && backgroundImageStyle?.position === "right" && (
        <div
          class="marquee-bg-image marquee-bg-right"
          style={{
            backgroundImage: `url(${backgroundImage})`,
            /* ... similar styles ... */
          }}
        />
      )}
    </div>
  )
}

<style>
  .marquee-container {
    display: flex;
    align-items: center;
    position: relative;
    width: 100%;
    min-height: 3rem;
    overflow: hidden;
    background-color: var(--marquee-bg-color, #f0f0f0);
    color: var(--marquee-text-color, #333);
    padding: 0.5em 1em;
    box-sizing: border-box;
  }

  .marquee-bg-image {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 100px; /* 示例宽度，应可配置或根据图片内容 */
    background-position: center;
    z-index: 0;
  }
  .marquee-bg-left {
    left: 0;
  }
  .marquee-bg-right {
    right: 0;
  }

  .marquee-content-wrapper {
    display: flex;
    flex-grow: 1;
    white-space: nowrap;
    position: relative;
    z-index: 1;
  }
  .marquee-content-wrapper.static {
    white-space: normal;
    justify-content: center;
  }

  .marquee-content-inner {
    display: inline-flex;
    align-items: center;
    padding: 0 1rem;
  }

  .marquee-scroll-left .marquee-content-inner,
  .marquee-scroll-right .marquee-content-inner {
    /* 对于更平滑的无缝滚动，通常动画作用于 wrapper，且 wrapper 宽度是内容宽度的整数倍 */
  }

  /* 动画作用于 .marquee-content-wrapper */
  .marquee-scroll-left {
    animation: marqueeAnimateLeft var(--marquee-duration, 60s) linear infinite;
  }
  .marquee-scroll-right {
    animation: marqueeAnimateRight var(--marquee-duration, 60s) linear infinite;
  }

  .marquee-content-wrapper.pause-on-hover-enabled:hover {
    animation-play-state: paused;
  }

  @keyframes marqueeAnimateLeft {
    0% {
      transform: translateX(0%);
    }
    /* 假设 .marquee-content-wrapper 包含两份内容，所以移动 -50% 即可循环 */
    100% {
      transform: translateX(-50%);
    }
  }
  @keyframes marqueeAnimateRight {
    0% {
      transform: translateX(-50%);
    }
    100% {
      transform: translateX(0%);
    }
  }

  .marquee-primary {
    font-weight: bold;
    margin-right: 0.5em;
  }
  .marquee-secondary {
    margin-left: 0.5em;
  }
  .marquee-separator {
    opacity: 0.7;
  }
  .marquee-button {
    margin-left: 1em;
    padding: 0.3em 0.8em;
    border: 1px solid var(--marquee-button-border-color, currentColor);
    border-radius: 4px;
    text-decoration: none;
    color: var(--marquee-button-text-color, currentColor);
    background-color: var(--marquee-button-bg-color, transparent);
    transition:
      background-color 0.2s,
      color 0.2s;
  }
  .marquee-button:hover {
    background-color: var(--marquee-button-hover-bg-color, currentColor);
    color: var(
      --marquee-button-hover-text-color,
      var(--marquee-bg-color, #fff)
    );
  }

  @media (prefers-reduced-motion: reduce) {
    .marquee-content-wrapper.marquee-scroll-left,
    .marquee-content-wrapper.marquee-scroll-right {
      animation: none;
      justify-content: center;
    }
    .marquee-content-wrapper.marquee-scroll-left
      .marquee-content-inner:not(:first-child),
    .marquee-content-wrapper.marquee-scroll-right
      .marquee-content-inner:not(:first-child) {
      display: none;
    }
  }
</style>
